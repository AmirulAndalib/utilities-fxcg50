name: Build Casio FX-CG50 Utilities

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the release'
        required: false
        default: 'v$(date +%Y%m%d%H%M%S)'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout utilities repository
      uses: actions/checkout@v2
      with:
        path: utilities-fxcg50

    - name: Checkout libfxcg repository
      run: |
        git clone https://github.com/dr-carlos/libfxcg.git
        cd libfxcg
        # Set up the toolchain environment
        export FXCGSDK=$(pwd)/toolchain
        # Install dependencies and build the toolchain
        curl -L http://ftpmirror.gnu.org/binutils/binutils-2.34.tar.bz2 | tar xj
        mkdir build-binutils
        cd build-binutils
        ../binutils-2.34/configure --target=sh3eb-elf --disable-nls --with-sysroot
        make -j$(nproc)
        sudo make install

        cd ..
        curl -L http://ftpmirror.gnu.org/gcc/gcc-10.1.0/gcc-10.1.0.tar.xz | tar xJ
        mkdir build-gcc
        cd build-gcc
        ../gcc-10.1.0/configure --target=sh3eb-elf --with-pkgversion=PrizmSDK --without-headers --enable-languages=c,c++ --disable-tls --disable-nls --disable-threads --disable-shared --disable-libssp --disable-libvtv --disable-libada --with-endian=big --with-multilib-list=
        make -j$(nproc) inhibit_libc=true all-gcc
        sudo make install-gcc
        make -j$(nproc) inhibit_libc=true all-target-libgcc
        sudo make install-target-libgcc

    - name: Build utilities
      run: |
        cd utilities-fxcg50
        export FXCGSDK=$(pwd)/../libfxcg/toolchain
        make

    - name: Upload utilities
      uses: actions/upload-artifact@v2
      with:
        name: Utilities
        path: |
          utilities-fxcg50/Utilities.g3a

    - name: Create Tag
      id: create_tag
      run: |
        if [ "${{ github.event.inputs.version }}" ]; then
          new_version="${{ github.event.inputs.version }}"
        else
          new_version="v$(date +%Y%m%d%H%M%S)"
        fi
        echo "new_version=${new_version}" >> $GITHUB_ENV
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "${new_version}"
        git push origin "${new_version}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_version }}
        release_name: Release ${{ env.new_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: utilities-fxcg50/Utilities.g3a
        asset_name: Utilities.g3a
        asset_content_type: application/octet-stream
